carddeck <- read.csv("C:/Users/user/Desktop/Don Timmy/Don Timmy's Work/Career Growth/Data Science Career/MY R Projects/RScripts/Hands-On Programming/deck.csv",
stringsAsFactors = FALSE)
Veiw(carddeck)
View(carddeck)
#In the card game called 'war', the aces have the highest value, 14. We are going to
#change their values from 1. Before the card is shuffled, the aces appear every 13
#cards
carddeckmod[c(13, 26, 39, 52), ]
carddeckmod$value[c(13, 26, 39, 52)]
carddeckmod[c(13, 26, 39, 52), 3] #will give us only the values of the aces
#Now, assign 14 to these values. You can either use c(14, 14, 14, 14) or just use a
#single 14 and leave the rest in R's hands
carddeckmod$value[c(13, 26, 39, 52)] <- 14
#In the card game called 'war', the aces have the highest value, 14. We are going to
#change their values from 1. Before the card is shuffled, the aces appear every 13
#cards
carddeckmod[c(13, 26, 39, 52), ] #all the four aces cards are addressed
#Now recheck the values. They've been changed in place
carddeckmod[c(13, 26, 39, 52), ]
source('C:/Users/user/Desktop/Don Timmy/Don Timmy\'s Work/Career Growth/Data Science Career/MY R Projects/RScripts/Hands-On Programming/Packages and Help.R', echo=TRUE)
source('C:/Users/user/Desktop/Don Timmy/Don Timmy\'s Work/Career Growth/Data Science Career/MY R Projects/RScripts/Hands-On Programming/Project Playing Cards.R', echo=TRUE)
#what if the card deck had been shuffled and the ace cards were not in every 13 cards
#You'd have to use 'logical subsetting'...
shuffle(carddeckmod)
#what if the card deck had been shuffled and the ace cards were not in every 13 cards
#You'd have to use 'logical subsetting'...
carddeckmod2 <- shuffle(carddeckmod)
carddeckmod2$value[carddeckmod2$face == "ace"] <- 14
carddeckmod2[carddeckmod2$face == "ace"]
carddeckmod2[carddeckmod2$face == "ace", ]
#Now, we change the card game we are playing... Let's switch to the HEARTS game
#In the game of hearts, every card except the suit of hearts and the queen of spades
#has a 0 value. The suit of hearts have a value of 1: Assign 1 to them:
carddeckmod3 <- shuffle(carddeckmod2)
#First, change all the values to zero for all the cards
carddeckmod3$value <- 0
head(carddeckmod3)
#Now, change the values for the  suit of hearts
carddeckmod3$value[carddeckmod3$suit == "hearts"] <- 1
#THe queen of spades has a value of 13 in the hearts game
carddeckmod3$value[carddeckmod3$face == "queen" & carddeckmod3$suit = "spades"] <- 13
#THe queen of spades has a value of 13 in the hearts game
carddeckmod3$value[carddeckmod3$face == "queen" & carddeckmod3$suit == "spades"] <- 13
w <- c(-1, 0, 1)
x <- c(5, 15)
y <- "February"
z <- c("Monday", "Tuesday", "Friday")
w > 0
x > 10 & x < 20
y == "February"
weekday <- c("Monday", "Tuesday", "Wednesday" "Thursday", "Friday", "Saturday", "Sunday")
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
z == weekday
weekday == z
all(z %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
source('C:/Users/user/Desktop/Don Timmy/Don Timmy\'s Work/Career Growth/Data Science Career/MY R Projects/RScripts/Hands-On Programming/Project Playing Cards.R', echo=TRUE)
#BLACKJACK Card Game
#The value of each number card in blackjack is it's face value. But the face cards have
#a value of ten and the ace cards's value changes depending on the point in the game
#Create another pristine card deck
carddeckmod4 <- carddeck
#facecards in 'facecard'
#change the values to 10
carddeckmod4$value[facecard] <- 10
carddeckmod4[facecard, ]
facecard <- carddeckmod4$face %in% c("king", "queen", "jack") #store the indices of the
#facecards in 'facecard'
#change the values to 10
carddeckmod4$value[facecard] <- 10
carddeckmod4[facecard, ]
#Treat the ace cards as missing info since it's value depends on the other cards in the
#player's hands
carddeckmod4$value[carddeckmod4$face == "ace"] <- "NA"
sum(is.na(carddeckmod4$value))
#Treat the ace cards as missing info since it's value depends on the other cards in the
#player's hands
carddeckmod4$value[carddeckmod4$face == "ace"] <- "NA"
sum(is.na(carddeckmod4$value))
is.na(carddeckmod4$value)
#Treat the ace cards as missing info since it's value depends on the other cards in the
#player's hands
carddeckmod4$value[carddeckmod4$face == "ace"] <- NA
is.na(carddeckmod4$value)
sum(is.na(carddeckmod4$value))
deal(carddeckmod4)
deal(carddeck)
#ENVIRONMENTS
library(devtools)
parent.env()
parenvs(all = TRUE)
install.packages("devtools")
#ENVIRONMENTS
library(devtools)
parenvs(all = TRUE)
environment()
source('C:/Users/user/Desktop/Don Timmy/Don Timmy\'s Work/Career Growth/Data Science Career/MY R Projects/RScripts/Regression Training with R/Bivariate Probit Regression.R', echo=TRUE)
View(schdata)
str(schdata)
#BIVARIATE PROBIT
install.packages(mlogit)
#BIVARIATE PROBIT
install.packages("mlogit")
#ENVIRONMENTS
as.environment("package::stats")
#ENVIRONMENTS
as.environment("package:stats")
globalenv()
install.packages('pryr')
parent.env(globalenv())
parent.env(baseenv())
parent.env(whatif())
parent.env("package:WhatIf")
parent.env("package:WhatIf"())
parent.env(package:WhatIf)
ls(globalenv())
ls("package:WhatIf")
ls("package:MatchIt")
ls.str("package:MatchIt")
ls.str(globalenv())
ls.str(baseenv())
ls.str(globalenv()) #ls.str gives more info about those objects
globalenv()$carddeck
package:stats$whatif
#you can also save objects into any environment using the assign() function
assign(awesome, 5, envir = globalenv())
#you can also save objects into any environment using the assign() function
assign(awesome, 5, envir = globalenv())
#you can also save objects into any environment using the assign() function
assign("awesome", 5, envir = globalenv())
#into the global environment akin to:
awesome <- 5
globalenv()$awesome
#ACTIVE ENVIRONMENT
#The environment that R is working most closely with at any given moment...
#Check the current 'active environment' using environment()
environment()
show_env <- function(){
#function to show what runtime environments and objects were created during
#the function call
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
#the environment in which a function was created will always serve as the 'parent'
#environment to the created 'runtime environment' on creation...
#check the environment in which a function was created by using 'environment()'
environment()
#the environment in which a function was created will always serve as the 'parent'
#environment to the created 'runtime environment' on creation...
#check the environment in which a function was created by using 'environment()'
environment(shuffle)
#the environment in which a function was created will always serve as the 'parent'
#environment to the created 'runtime environment' on creation...
#check the environment in which a function was created by using 'environment()'
environment(whatif)
#the environment in which a function was created will always serve as the 'parent'
#environment to the created 'runtime environment' on creation...
#check the environment in which a function was created by using 'environment()'
environment(select)
#the environment in which a function was created will always serve as the 'parent'
#environment to the created 'runtime environment' on creation...
#check the environment in which a function was created by using 'environment()'
environment(deal)
#the environment in which a function was created will always serve as the 'parent'
#environment to the created 'runtime environment' on creation...
#check the environment in which a function was created by using 'environment()'
environment(amelia)
#objects inside of functions will be stored in the temporary active run enviroments
#create objects in show_env and see the objects
show_env <- function(){
#function to show what runtime environments and objects were created during
#the function call
a <- 1
b <- 2
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
#R will also copy arguments from the global environment into the runtime environment
#as objects with the given values
foo <- "take me to your runtime"
show_env <- function(){
#function to show what runtime environments and objects were created during
#the function call
a <- 1
b <- 2
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env <- function(x = foo){
#function to show what runtime environments and objects were created during
#the function call
a <- 1
b <- 2
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env(x = foo)
source('C:/Users/user/Desktop/Don Timmy/Don Timmy\'s Work/Career Growth/Data Science Career/MY R Projects/RScripts/Hands-On Programming/Project Playing Cards.R', echo=TRUE)
#Fixing the deal function with and understanding of R's environment tree
#Because the function 'deal' was created at the command line, it has the 'global environment'
#has a parent of it's runtime environment. Meaning? We don't need to put the carddeck
#as an argument before we can use it in the function... If R cannot find the deck in
#the 'runtime environment', it will look it up in the 'parent environment' i.e. the
#global environment... and use it in the evaluation of the function... Rewrite the 'deal'
#function
deal <- function() {
#this function returns the first card in the carddeck
carddeck[1, ]
}
deal()
#Fixing the deal function with and understanding of R's environment tree
#Because the function 'deal' was created at the command line, it has the 'global environment'
#has a parent of it's runtime environment. Meaning? We don't need to put the carddeck
#as an argument before we can use it in the function... If R cannot find the deck in
#the 'runtime environment', it will look it up in the 'parent environment' i.e. the
#global environment... and use it in the evaluation of the function... Rewrite the 'deal'
#function
deal <- function() {
#this function returns the first card in the carddeck
#Note: we don't have to put the carddeck as an argument because
#it is present in the 'origin/parent environment' of the function
carddeck[1, ]
}
deal() #the function call will always return the same cards
card #return the top card
#Now, we will use our understanding of R's environment to make sure that each 'deal' call
#takes the top card then immediately puts it away. As such there will be different top
#cards each time the function is called
#A look at what will not work first:
deal <- function() {
card <- carddeck[1, ] #pick top card
carddeck <- carddeck[-1, ] #put the top card away
card #return the top card
}
deal()
#To avoid that, we need to create that modified carddeck object in the 'global environment'
#so that it will update the value of the carddeck object in the global environment and
#give us a new top card anytime we call the deal function
deal <- function() {
card <- carddeck[1, ] #pick top card
assign("carddeck", carddeck[-1, ], envir = globalenv()) #create new carddeck object
#in the global environment to overwrite the former carddeck
card
}
#To avoid that, we need to create that modified carddeck object in the 'global environment'
#so that it will update the value of the carddeck object in the global environment and
#give us a new top card anytime we call the deal function
deal <- function() {
card <- carddeck[1, ] #pick top card
assign("carddeck", carddeck[-1, ], envir = globalenv()) #create new carddeck object
#in the global environment to overwrite the former carddeck
card #return the first top card
}
deal()
carddeck
deal()
carddeck
#MY Deck of Cards
carddeck <- read.csv("C:/Users/user/Desktop/Don Timmy/Don Timmy's Work/Career Growth/Data Science Career/MY R Projects/RScripts/Hands-On Programming/deck.csv",
stringsAsFactors = FALSE)
#FIXING the 'shuffle' function now
#create a pristine copy of the carddeck and call it CARDDECK
CARDDECK <- carddeck
#instead of really shuffling the carddeck, 'shuffle' creates a 'shuffled copy' of the
#carddeck...
shuf <- shuffle()
#instead of really shuffling the carddeck, 'shuffle' creates a 'shuffled copy' of the
#carddeck...
shuf <- shuffle(cards = carddeck)
shuf
carddeck
#THE MISSION now:
#the function should 1) replace the copy of carddeck in the global environment with
#a shuffled CARDDECK... no argument, no output
shuffle <- function() {
#this function shuffles the CARDDECK and then overwrites the
#carddeck object
assign("CARDDECK", CARDDECK[sample(1:52, 52), ], envir = globalenv()) #shuffle
#the CARDDECK object in the global environment
assign("carddeck", CARDDECK, envir = globalenv()) #replace the carddeck object
#with the already shuffled CARDDECK
}
shuffle()
head(carddeck)
shuffle()
head(carddeck)
shuffle()
head(carddeck)
deal()
shuffle()
deal()
()
deal()
shuffle()
deal()
head(carddeck)
shuffle()
#we actually don't need as much line of code to fix shuffle
shuffle <- function() {
#this function shuffles the CARDDECK and then overwrites the
#carddeck object
assign("carddeck", CARDDECK[sample(1:52, 52), ], envir = globalenv()) #replace the carddeck object
#with the already shuffled CARDDECK
}
shuffle() #this indeed shuffles the CARDDECK object
head(carddeck)
shuffle() #this indeed shuffles the CARDDECK object
head(carddeck)
deal()
head(carddeck)
shuffle() #this indeed shuffles the CARDDECK object
setup <- function(carddeck) {
CARDDECK <- carddeck #create a CARDDECK object
DEAL <- function() { #store the deal function in the setup function
card <- carddeck[1, ] #take top card
assign("carddeck", carddeck[-1, ], envir = parent.env(environment())) #update
#the carddeck object by putting the top card aside. the parent environment is
#now the setup function runtime environment and not the global environment
card #return chosen top card
}
SHUFFLE <- function() {
assign("carddeck", CARDDECK[sample(1:52, 52), ], envir = parent.env(environment())) #update
#the carddeck object in the parent environment which is the runtime environment of the
#setup function with the shuffled CARDDECK
}
list(deal = DEAL, shuffle = SHUFFLE) #return the 'deal' and 'shuffle' functions in
#a list
}
cards <- setup(carddeck)
deal <- cards$deal
shuffle <- cards$shuffle
environment(deal)
environment(shuffle)
deal()
head(carddeck)
carddeck
deal()
carddeck
rm(carddeck)
deal()
carddeck
deal()
shuffle()
deal()
shuffle()
deal()
shuffle()
deal()
shuffle()
deal()
shuffle()
deal()
head(carddeck)
deal()
shuffle()
deal()
setup <- function(carddeck) {
CARDDECK <- carddeck #create a CARDDECK object
DEAL <- function() { #store the deal function in the setup function
card <- carddeck[1, ] #take top card
assign("carddeck", carddeck[-1, ], envir = parent.env(environment())) #update
#the carddeck object by putting the top card aside. the parent environment is
#now the setup function runtime environment and not the global environment
card #return chosen top card
}
SHUFFLE <- function() {
assign("carddeck", CARDDECK[sample(1:52, 52), ], envir = parent.env(environment())) #update
#the carddeck object in the parent environment which is the runtime environment of the
#setup function with the shuffled CARDDECK
}
list(deal = DEAL, shuffle = SHUFFLE) #return the 'deal' and 'shuffle' functions in
#a list
}
deal()
cards <- setup(carddeck) #save the list in the cards object
#MY Deck of Cards
carddeck <- read.csv("C:/Users/user/Desktop/Don Timmy/Don Timmy's Work/Career Growth/Data Science Career/MY R Projects/RScripts/Hands-On Programming/deck.csv",
stringsAsFactors = FALSE)
setup <- function(carddeck) {
CARDDECK <- carddeck #create a CARDDECK object
DEAL <- function() { #store the deal function in the setup function
card <- carddeck[1, ] #take top card
assign("carddeck", carddeck[-1, ], envir = parent.env(environment())) #update
#the carddeck object by putting the top card aside. the parent environment is
#now the setup function runtime environment and not the global environment
card #return chosen top card
}
SHUFFLE <- function() {
assign("carddeck", CARDDECK[sample(1:52, 52), ], envir = parent.env(environment())) #update
#the carddeck object in the parent environment which is the runtime environment of the
#setup function with the shuffled CARDDECK
}
list(deal = DEAL, shuffle = SHUFFLE) #return the 'deal' and 'shuffle' functions in
#a list
}
rm(carddeck) #remove carddeck from the global environment and deal and shuffle are still
cards <- setup(carddeck) #save the list in the cards object
#MY Deck of Cards
carddeck <- read.csv("C:/Users/user/Desktop/Don Timmy/Don Timmy's Work/Career Growth/Data Science Career/MY R Projects/RScripts/Hands-On Programming/deck.csv",
stringsAsFactors = FALSE)
cards <- setup(carddeck) #save the list in the cards object
deal <- cards$deal
shuffle <- cards$shuffle
rm(carddeck) #remove carddeck from the global environment and deal and shuffle are still
deal()
shuffle()
deal()
source('C:/Users/user/Desktop/Don Timmy/Don Timmy\'s Work/Career Growth/Data Science Career/MY R Projects/RScripts/Hands-On Programming/Project Playing Cards.R', echo=TRUE)
deal()
shuffle()
deal()
View(card)
#First Task: Build the Play Function
#Capabilities of the Play function: 1) Randomly generate three casino symbols from a casino
#symbols group
#2) Calculate a prize based on the symbols
#Building a function for the first task:
symbol.gen <- function() {
#this function randomly generates three symbols from the wheel
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0") #the slot machine symbols
sample(wheel, size =  3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52)) #randomly generate three num
#bers with the weights 'prob'
}
#test symbol.gen
symbol.gen()
#test symbol.gen
symbol.gen()
#test symbol.gen
symbol.gen()
symbols <- c("7", "7", "7")
symbols <- c("B", "BB", "BBB")
"B" %in% symbols[1] & "B" %in% symbols[2] && "B" %in% symbols[3]
"B" %in% symbols[1] & "BB" %in% symbols[2] && "BBB" %in% symbols[3]
any("B" %in% symbols[1])
any("B" %in% symbols[2])
any("B") %in% symbols[2]
c(0, 2, 5)[4]
c(0, 2, 5)[3]
score <- function (symbols) {
# identify case
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
# get prize
if (same) {
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,
"B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[symbols[1]])
} else if (all(bars)) {
prize <- 5
} else {
cherries <- sum(symbols == "C")
prize <- c(0, 2, 5)[cherries + 1]
}
# adjust for diamonds
diamonds <- sum(symbols == "DD")
prize * 2 ^ diamonds
}
play <- function() {
symbols <- get_symbols()
print(symbols)
score(symbols)
}
play()
play <- function() {
symbols <- symbol.gen()
print(symbols)
score(symbols)
}
play()
replicate(10000, play())
play()
replicate(10, play())
replicate(20, play())
play <- function() {
symbols <- symbol.gen()
print(symbols)
score <- score(symbols)
list(Payouts = score)
}
play()
play()$Payouts
play()
replicate(20, play())
play <- function() {
symbols <- symbol.gen()
#print(symbols)
score <- score(symbols)
list(Output = symbols, Payouts = score)
}
play()
playsimul <- replicate(20, play())
playsimul$Payouts
names(playsimul)
playsimul
playsimul <- replicate(20, play()$Payouts)
plot(playsimul)
hist(playsimul)
barplot(playsimul)
playsimul <- replicate(10000, play()$Payouts)
hist(playsimul)
table(playsimul)
playsimul <- replicate(20000, play()$Payouts)
table(playsimul)
playsimul <- replicate(50000, play()$Payouts)
table(playsimul) #if you play this thing 20,000 times, you are likely to have $80 payout
hist(playsimul)
